#include <ctime>
#include <GL/glut.h>
#include<stdlib.h>
#include<windows.h>
void Initialize() {
	glClearColor(0.0, 0.0, 0.0, 0.0); /*Specify the red, green, blue, and alpha values used when the
	   color buffers are cleared*/

	glMatrixMode(GL_PROJECTION); //subsequent matrix operations are on the PROJECTION matrix
	glLoadIdentity();// load the identity matrix for the projection matrix first
	//then set camera projection
	gluPerspective(45.0f, 960.0f / 720.0f, 0.1f, 100.0f); // (angle of view, aspect ratio, near, far clipping planes)
}



void Draw() {
	glClear(GL_COLOR_BUFFER_BIT); /* clear the color buffer,the buffers enabled for color
						writing*/
	glColor3f(1.0, 1.0, 1.0);// use white color to draw objects
	//shape->draw();
	glMatrixMode(GL_MODELVIEW); //subsequent matrix operations are on the MODELVIEW matrix
	glLoadIdentity();// load the identity matrix


	glFlush();//force execution of GL commands
}

void Triangle() {
	glClear(GL_COLOR_BUFFER_BIT); /* clear the color buffer,the buffers enabled for color
						writing*/
	glBegin(GL_TRIANGLES);
	glVertex3f(0.0f, 1.0f, 0.0f);
	glVertex3f(-1.0f, 0.0f, 0.0f);
	glVertex3f(1.0f, 0.0f, 0.0f);
	glEnd();


	glFlush();//force execution of GL commands
}

void display() {
	int TMP = 0;
	for (int i = 0; i < 6; i++) {
		glRotatef(60, 0.0f, 0.0f, 1.0f);
		glBegin(GL_LINE_STRIP); {
			glVertex2f(0.02f, 0.02f);
			glVertex2f(0.04f, 0.02f);
			glVertex2f(0.07f, 0.05f);
			glVertex2f(0.09f, 0.05f);
			glVertex2f(0.08f, 0.02f);
			glVertex2f(0.10f, 0.02f);
			glVertex2f(0.12f, 0.04f);
			glVertex2f(0.14f, 0.04f);
			glVertex2f(0.13f, 0.02f);
			glVertex2f(0.15f, 0.02f);
			glVertex2f(0.18f, 0.00f);
		}
		glEnd();
		glScalef(1, -1, 0);
		glBegin(GL_LINE_STRIP); {
			glVertex2f(0.02f, 0.02f);
			glVertex2f(0.04f, 0.02f);
			glVertex2f(0.07f, 0.05f);
			glVertex2f(0.09f, 0.05f);
			glVertex2f(0.08f, 0.02f);
			glVertex2f(0.10f, 0.02f);
			glVertex2f(0.12f, 0.04f);
			glVertex2f(0.14f, 0.04f);
			glVertex2f(0.13f, 0.02f);
			glVertex2f(0.15f, 0.02f);
			glVertex2f(0.18f, 0.00f);	
		}
		glEnd();
		glScalef(1, -1, 0);
		//TMP += 60;
	}
	glFlush();
}
void Dis() {
	glClear(GL_COLOR_BUFFER_BIT);
	display();
	Sleep(100);
	glRotatef(1, 0, 0, 1.0f);
}
//void Twl() {
//	srand(time(NULL));
//	double ratio = 1.0;
//	for (int i = 0; i < 20; i++) {
//		float x = float(rand() % 10) / 10;
//		float y = float(rand() % 10) / 10;
//		ratio = double(rand() % 20) / 10;
//		if (i & 1)x = -x,y=-y;
//		glScalef(ratio, ratio, ratio);
//		glTranslatef(x, y, 0);
//		glRotatef(1, 0.0f, 0.0f, 1.0f);
//		display();
//	}
//}
int main(int iArgc, char** cppArgv) {
	glutInit(&iArgc, cppArgv);//initialize glut

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);/*use single (as opposed to double) buffer
												and RGB (as apposed to INDEX) color*/
	glutInitWindowSize(1024,1080); // set window size, (width, height)
	glutInitWindowPosition(0, 0);  // set window position, (0,0) is the top left corner
	glutCreateWindow("POLYGON");//  name the window
	glutDisplayFunc(&Dis);
	glutIdleFunc(&Dis);
	glutMainLoop();//put the program in an infinite event loop


	return 0;
}
